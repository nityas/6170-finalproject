

<h1>Listing locations</h1>

<table>
  <thead>
    <tr>
      <th>Latitude</th>
      <th>Longitude</th>
      <th>Address</th>
      <th>Custom ID</th>
      <th>Name</th>
      <th>Description</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>

  <tbody>
    <% @locations.each do |location| %>
      <tr>
        <td><%= location.latitude %></td>
        <td><%= location.longitude %></td>
        <td><%= location.address %></td>
        <td><%= location.customid %></td>
        <td><%= location.title %></td>
        <td><%= location.description %></td>
        <td><%= link_to 'Show', location %></td>
        <td><%= link_to 'Edit', edit_location_path(location) %></td>
        <td><%= link_to 'Destroy', location, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<!--<%= link_to 'New Location', new_location_path %>-->


<%= text_field_tag "query", nil, :placeholder => "i.e. Stata", :id => "queryField" %>
<%= submit_tag "search", :id => "search" %>


<%= render partial: 'map.html.erb'%>


<script type="text/javascript">
   var strictBounds = new google.maps.LatLngBounds(
     new google.maps.LatLng(42.340, -71.20), 
     new google.maps.LatLng(42.370, -71.0)
   );

var mapOptions = 
{
    maxZoom:19,
    minZoom:15,
};

handler = Gmaps.build('Google', {markers: { maxRandomDistance: null} });
handler.buildMap({ provider: mapOptions, internal: {id: 'map'}}, function(){
  markers = handler.addMarkers(<%=raw @hash.to_json %>);
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
  handler.getMap().setCenter(new google.maps.LatLng(42.359, -71.090413));
});
   var map = handler.getMap();

   // Listen for the dragend event
   google.maps.event.addListener(map, 'dragend', function() {
     if (strictBounds.contains(map.getCenter())) return;

     // We're out of bounds - Move the map back within the bounds

     var c = map.getCenter(),
         x = c.lng(),
         y = c.lat(),
         maxX = strictBounds.getNorthEast().lng(),
         maxY = strictBounds.getNorthEast().lat(),
         minX = strictBounds.getSouthWest().lng(),
         minY = strictBounds.getSouthWest().lat();

     if (x < minX) x = minX;
     if (x > maxX) x = maxX;
     if (y < minY) y = minY;
     if (y > maxY) y = maxY;

     map.setCenter(new google.maps.LatLng(y, x));
   });

$(document).ready( function () {
  $("#search").click(function(){
    var query = $("#queryField").val();
    create_search(query);
    
  });

  function create_search(query){
    $.ajax({
        url: "http://whereis.mit.edu/search",
        type: 'GET',
        data: {type: 'query', q: query, output: 'json'},
        dataType: 'jsonp',
        success: function(res){
          handle_search_result(res[0]);
         // $('#map').html('<%= j(render partial: 'map') %>');

        }
    });
  }

  function handle_search_result(result){
    console.log(result);
    if (result == undefined){
      handle_null_result();
    }else{

      var latitude = result.lat_wgs84;
      var longitude = result.long_wgs84;
      var image = result.bldgimg;
      var address = result.address;
      var name = result["name"];
      var mitlocation_id = result["id"];
      create_location(latitude, longitude, mitlocation_id, name, address);
    }

  }

  /*
    Creates this location if it didn't already exist.
  */
  function create_location(lat, lng, mitlocation_id, location_name, addr){
    $.ajax({
      url: "/locations",
      type: 'POST',
      data: {location: {latitude: lat, longitude: lng, address: addr, title: location_name, description: "sample description", customid: mitlocation_id}},
      success: function(res){
        console.log("location created: " + location_name)

      }
    })
  }

  /*
    Sends user's search query to whereis.mit.edu and gets back information for this potential location.
  */
  function handle_null_result(){
    alert("no MIT location found for your query");
  }

});

</script>

